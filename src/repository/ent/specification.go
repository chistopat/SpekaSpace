// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"git.redmadrobot.com/internship/backend/lim-ext/src/repository/ent/specification"
	"github.com/google/uuid"
)

// Specification is the model entity for the Specification schema.
type Specification struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Status holds the value of the "status" field.
	Status specification.Status `json:"status,omitempty"`
	// Spec holds the value of the "spec" field.
	Spec []string `json:"spec,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Specification) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case specification.FieldSpec:
			values[i] = new([]byte)
		case specification.FieldName, specification.FieldDescription, specification.FieldAuthor, specification.FieldStatus:
			values[i] = new(sql.NullString)
		case specification.FieldCreatedAt, specification.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case specification.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Specification", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Specification fields.
func (s *Specification) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case specification.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case specification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case specification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case specification.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case specification.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case specification.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				s.Author = value.String
			}
		case specification.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = specification.Status(value.String)
			}
		case specification.FieldSpec:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field spec", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Spec); err != nil {
					return fmt.Errorf("unmarshal field spec: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Specification.
// Note that you need to call Specification.Unwrap() before calling this method if this Specification
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Specification) Update() *SpecificationUpdateOne {
	return (&SpecificationClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Specification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Specification) Unwrap() *Specification {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Specification is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Specification) String() string {
	var builder strings.Builder
	builder.WriteString("Specification(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", description=")
	builder.WriteString(s.Description)
	builder.WriteString(", author=")
	builder.WriteString(s.Author)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", spec=")
	builder.WriteString(fmt.Sprintf("%v", s.Spec))
	builder.WriteByte(')')
	return builder.String()
}

// Specifications is a parsable slice of Specification.
type Specifications []*Specification

func (s Specifications) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
