// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX3W7bNhR+FYLbpWLLaS4GXS11nNZDYXfOT7ENQcBIxzYbSWRIKqsRGEj2d5tn2Bt0",
	"RTN4Hdq+AvVGw6HkP9leBqwrht4Y1CH58ZzznT9f0VAkUqSQGk2DK6pAS5FqcB8tpYTqlRIUhCI1kBpc",
	"MiljHjLDRVp/rkWKMh0OIWG4+lxBnwb0s/ocvV7s6rpDpePx2KMR6FBxiSA0oA9ZRHpwkYE2FHfLCzNN",
	"cCGVkKAMLxRMQGs2cKrBC5bIGGhAFVxkXEFE+hziSJNUGNIXWRpRj5qRxCPaKJ4O6HgquKKQZgkNvqPt",
	"zvHuk/beaa/19VHr4JB6tNM9PN3vHnX2qEeb3c7+k3bzkJ6sQM2wqDh7DqFB8AMJIe+XXsJXlu3tZ3FM",
	"zkQ0ol7FLpaZYWHv8o1YDHhKRJ+ECpgRinoLdodDro2QzKyz0z2zgidjxlNi4IUhelFXpxVxtK7Bco9D",
	"dMrMsuO3/e3GVsPfajQOt/2g4Qd+41vq0b5QCR6lETOwZXgC60CXFKvqGYokwbhbNJfFMWFnIjMkGRGd",
	"SVCESb4OOmUJrGJmKb/IoGI3HvVIpiEiMT8HwqOlN5PRqXvpdMNL2jCT6fsS4MCd2sfoxEuZjD60O+8N",
	"xqaj8OHaoCjTRgOmjSpCreKnlYD9BNi712fOUG4guZ/gJV/NgZlSbORwFyLAmdZnWYyc7vV297HoLBtb",
	"hBUapgtKRByzM6EKq6USIWgs2d6sjE1xOq1n7reFFe247b66nfm6+Xi386h1MC13LSxyu0+f9rpHx27d",
	"a33VapbiXvNxG6Uniz4tHqi6cuxRnvbFtGWwsAjthPF4sVB9OUBJLRQJnfJMv4GBUKQ55HrEzsXlSmmg",
	"9ld7l1/bV3aS3xD72v6Z35L85/zavrRv7Z19ayf5rUfs+/zavrN39k3+g5249St3YpLfEjsh9p39Lb/J",
	"f7S/29fTW6QrId2VnOQ39r29y3+xk/wnO7Fv7Etc2z/QUm6c3cUR3KppyULMwUtQulCxUfNrPmouJKQY",
	"bAF9UPNrDzBtmBm6+KnranOQQjs3YV45YTuiAS0y9aCSfapok9ME/iB9eVOBcHROmyoNjMrACRYGhW2/",
	"8d+osW5M6IEWmQqhrEyuhu74/ibcmaL15XHGTRhZkjA1mrmZpPD9SqUzbKAxpyrF4AQBllmsX2UZj8ao",
	"yQDWcNkDFlWZlEyxBAwofKNa5Q6H1RLHI2KGzJAUINLECHIGpA8mHEJUo5h12NWZGc4TClWiVQK9BTKq",
	"yXuyQq7/8cjtnhd07vw7Oh/BykQzIqUn/jmf+m+YNIrDJVQw7qGzz2MDClUpB4WSsIsM1GjO2GxzM0fe",
	"ZuhydlwPPdv8H9CvP1pyT9kiOqzytTkYEAHU5XomYxGymHo0U9jQhsbIoF53wqHQJvjC39mmqyQZ/GdT",
	"ueRkq0elElH1qJMhP6XSV1NWnwl17rqQdkiltOrs+U6zGMiWZEcaLR2fjP8KAAD//9WW0AcSDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
